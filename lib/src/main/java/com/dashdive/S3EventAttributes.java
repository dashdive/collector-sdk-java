package com.dashdive;

import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.stream.Collectors;
import org.immutables.value.Value;

/**
 * An interface representing all attribute fields potentially extracted from an S3 event. The
 * provided implementation of this interface is the {@link ImmutableS3EventAttributes} class, which
 * is a {@link Value.Immutable} class generated by the Immutables library, with an associated {@link
 * ImmutableS3EventAttributes.Builder} builder class.
 *
 * <p>This data is serialized and sent as-is to the Dashdive ingestion API along with the {@link
 * S3ActionType}, {@link S3Provider}, timestamp, and any other applicable fields for the captured
 * event.
 */
@Value.Immutable(singleton = true)
@JsonSerialize(as = ImmutableS3EventAttributes.class)
public abstract class S3EventAttributes {
  /**
   * The customer ID associated with the S3 event, if present.
   *
   * @return the customer ID associated with the S3 event
   */
  public abstract Optional<String> customerId();

  /**
   * The feature ID associated with the S3 event, if present.
   *
   * @return the feature ID associated with the S3 event
   */
  public abstract Optional<String> featureId();

  /**
   * The client/device type associated with the S3 event, if present.
   *
   * @return the client/device type associated with the S3 event
   */
  public abstract Optional<String> clientType();

  /**
   * The client/device ID associated with the S3 event, if present.
   *
   * @return the client/device ID associated with the S3 event
   */
  public abstract Optional<String> clientId();

  /**
   * The category of the S3 object associated with the event, if present.
   *
   * @return the object category associated with the S3 event
   */
  public abstract Optional<String> objectCategory();

  /**
   * Returns the attributes as a map, excluding any empty or null values.
   *
   * @return the attributes as a map
   */
  public Map<String, Object> asMap() {
    return Map.of(
            "customerId", customerId().orElse(""),
            "featureId", featureId().orElse(""),
            "clientType", clientType().orElse(""),
            "clientId", clientId().orElse(""),
            "objectCategory", objectCategory().orElse(""))
        .entrySet()
        .stream()
        .filter(entry -> entry.getValue() != null && !entry.getValue().isEmpty())
        .collect(Collectors.toMap(Entry::getKey, Entry::getValue));
  }

  /**
   * Returns whether there are no attributes set.
   *
   * @return whether there are no attributes set
   */
  public boolean isEmpty() {
    return asMap().isEmpty();
  }
}
