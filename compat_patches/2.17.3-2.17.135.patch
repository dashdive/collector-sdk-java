diff --git a/lib/build.gradle.kts b/lib/build.gradle.kts
index 31aa34f..a3a2b9f 100644
--- a/lib/build.gradle.kts
+++ b/lib/build.gradle.kts
@@ -50,7 +50,7 @@ publishing {
     }
 }
 
-val awsJavaSdkVersion = "2.20.32"
+val awsJavaSdkVersion = "2.17.3"
 dependencies {
     testImplementation(libs.junit.jupiter)
     testRuntimeOnly("org.junit.platform:junit-platform-launcher")
@@ -59,7 +59,6 @@ dependencies {
 
     implementation(platform("software.amazon.awssdk:bom:$awsJavaSdkVersion"))
     implementation("software.amazon.awssdk:s3")
-    implementation("software.amazon.awssdk:imds")
     
     // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
     implementation("org.slf4j:slf4j-api:1.7.25")
diff --git a/lib/src/main/java/com/dashdive/Dashdive.java b/lib/src/main/java/com/dashdive/Dashdive.java
index 466e8a3..e9c5479 100644
--- a/lib/src/main/java/com/dashdive/Dashdive.java
+++ b/lib/src/main/java/com/dashdive/Dashdive.java
@@ -258,18 +258,11 @@ public class Dashdive implements AutoCloseable {
 
   // Once this method is called on the `clientBuilder`, the caller should not
   // call `clientBuilder.overrideConfiguration(...)` again, or the interceptor will be erased.
-  public S3ClientBuilder withInstrumentation(final S3ClientBuilder clientBuilder) {
-    final ClientOverrideConfiguration existingOverrideConfig =
-        clientBuilder.overrideConfiguration();
-    final ClientOverrideConfiguration.Builder modifiedOverrideConfigBuilder =
-        existingOverrideConfig == null
-            ? ClientOverrideConfiguration.builder()
-            : existingOverrideConfig.toBuilder();
-
-    final ClientOverrideConfiguration modifiedOverrideConfig =
-        addInterceptorIdempotentlyTo(modifiedOverrideConfigBuilder).build();
-
-    return clientBuilder.overrideConfiguration(modifiedOverrideConfig);
+  public S3ClientBuilder withNewOverrideConfigHavingInstrumentation(
+      final S3ClientBuilder clientBuilder) {
+    final ClientOverrideConfiguration newOverrideConfig =
+        addInterceptorIdempotentlyTo(ClientOverrideConfiguration.builder()).build();
+    return clientBuilder.overrideConfiguration(newOverrideConfig);
   }
 
   @VisibleForTesting
diff --git a/lib/src/main/java/com/dashdive/internal/InitialSetupWorker.java b/lib/src/main/java/com/dashdive/internal/InitialSetupWorker.java
index 7e73ade..92aaa81 100644
--- a/lib/src/main/java/com/dashdive/internal/InitialSetupWorker.java
+++ b/lib/src/main/java/com/dashdive/internal/InitialSetupWorker.java
@@ -19,7 +19,6 @@ import java.net.HttpURLConnection;
 import java.net.http.HttpClient;
 import java.net.http.HttpRequest;
 import java.net.http.HttpResponse;
-import java.time.Duration;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
@@ -33,9 +32,7 @@ import java.util.concurrent.atomic.AtomicReference;
 import org.immutables.value.Value;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import software.amazon.awssdk.core.retry.backoff.FixedDelayBackoffStrategy;
-import software.amazon.awssdk.imds.Ec2MetadataClient;
-import software.amazon.awssdk.imds.Ec2MetadataResponse;
+import software.amazon.awssdk.regions.internal.util.EC2MetadataUtils;
 
 public class InitialSetupWorker implements Runnable {
   private static final Logger logger = LoggerFactory.getLogger(InitialSetupWorker.class);
@@ -256,20 +253,10 @@ public class InitialSetupWorker implements Runnable {
           IMDSDataField.PUBLIC_IPV4,
           IMDSDataField.AMI_ID,
           IMDSDataField.INSTANCE_TYPE);
+  private static final int QUERY_TRIES = 3;
 
   private static GetAwsImdsDataResult getAwsImdsData() {
     final int maxImdsRequestConcurrency = 8;
-    // We don't use Ec2MetadataAsyncClient because it has noisy error
-    // logging that we don't want to surface to our users
-    final Ec2MetadataClient client =
-        Ec2MetadataClient.builder()
-            // Don't have to worry about retries blocking client
-            //  startup since this is a background thread
-            .retryPolicy(
-                p ->
-                    p.backoffStrategy(FixedDelayBackoffStrategy.create(Duration.ofMillis(200)))
-                        .numRetries(2))
-            .build();
     final ExecutorService executor = Executors.newFixedThreadPool(maxImdsRequestConcurrency);
 
     final ConcurrentMap<String, String> valuesByField = new ConcurrentHashMap<>();
@@ -283,9 +270,10 @@ public class InitialSetupWorker implements Runnable {
                     CompletableFuture.runAsync(
                         () -> {
                           try {
-                            Ec2MetadataResponse response =
-                                client.get(IMDS_BASE_PATH + imdsDataFieldPath);
-                            valuesByField.put(imdsDataFieldPath, response.asString());
+                            final String fieldValue =
+                                EC2MetadataUtils.getData(
+                                    IMDS_BASE_PATH + imdsDataFieldPath, QUERY_TRIES);
+                            valuesByField.put(imdsDataFieldPath, fieldValue);
                           } catch (Exception exception) {
                             exceptionsByField.put(imdsDataFieldPath, exception);
                             fieldsByExceptionChainsWithoutStacks.put(
@@ -296,7 +284,6 @@ public class InitialSetupWorker implements Runnable {
             .collect(ImmutableList.toImmutableList());
 
     CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
-    client.close();
     executor.shutdown();
 
     final ImmutableDashdiveInstanceInfo instanceInfo =
diff --git a/lib/src/main/java/com/dashdive/internal/extraction/S3RoundTripInterceptor.java b/lib/src/main/java/com/dashdive/internal/extraction/S3RoundTripInterceptor.java
index 704b4e4..376298a 100644
--- a/lib/src/main/java/com/dashdive/internal/extraction/S3RoundTripInterceptor.java
+++ b/lib/src/main/java/com/dashdive/internal/extraction/S3RoundTripInterceptor.java
@@ -64,8 +64,8 @@ public class S3RoundTripInterceptor implements ExecutionInterceptor {
     // We correlate the successful enqueueing of each event across `onExecutionFailure`
     // and `afterExecution` to ensure it's only done once per event.
     try {
-      final boolean hasSentPayload =
-          executionAttributes.getOptionalAttribute(sentPayloadAttr).orElse(false);
+      final Boolean hasSentPayloadObject = executionAttributes.getAttribute(sentPayloadAttr);
+      final boolean hasSentPayload = hasSentPayloadObject == null ? false : hasSentPayloadObject;
 
       final TelemetryPayload executionFailurePayload =
           TelemetryPayload.from(
@@ -122,8 +122,8 @@ public class S3RoundTripInterceptor implements ExecutionInterceptor {
   private boolean safeAfterExecutionReturningSuccess(
       Context.AfterExecution context, ExecutionAttributes executionAttributes) {
     try {
-      final boolean hasSentPayload =
-          executionAttributes.getOptionalAttribute(sentPayloadAttr).orElse(false);
+      final Boolean hasSentPayloadObject = executionAttributes.getAttribute(sentPayloadAttr);
+      final boolean hasSentPayload = hasSentPayloadObject == null ? false : hasSentPayloadObject;
       if (hasSentPayload) {
         return true;
       }
diff --git a/lib/src/test/java/com/dashdive/ErrorsTelemetryTest.java b/lib/src/test/java/com/dashdive/ErrorsTelemetryTest.java
index a222177..6582c40 100644
--- a/lib/src/test/java/com/dashdive/ErrorsTelemetryTest.java
+++ b/lib/src/test/java/com/dashdive/ErrorsTelemetryTest.java
@@ -15,6 +15,7 @@ import java.util.Optional;
 import java.util.stream.Collectors;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
+import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration;
 import software.amazon.awssdk.regions.Region;
 import software.amazon.awssdk.services.s3.S3Client;
 import software.amazon.awssdk.services.s3.model.HeadBucketRequest;
@@ -45,7 +46,11 @@ class ErrorsTelemetryTest {
             Optional.of(setupDefaults));
 
     final S3Client s3Client =
-        dashdive.withInstrumentation(S3Client.builder().region(Region.EU_CENTRAL_1)).build();
+        S3Client.builder()
+            .region(Region.EU_CENTRAL_1)
+            .overrideConfiguration(
+                dashdive.withInterceptor(ClientOverrideConfiguration.builder()).build())
+            .build();
 
     final String uuid = "bac79f5b-a302-4ad9-af79-6bf96f9446be";
     final HeadBucketRequest headBucketRequest =
