diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index ff0d152..7063d9d 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -9,7 +9,7 @@ repositories {
     mavenCentral()
 }
 
-val awsJavaSdkVersion = "2.19.29"
+val awsJavaSdkVersion = "2.17.136"
 dependencies {
     testImplementation(libs.junit.jupiter)
     testRuntimeOnly("org.junit.platform:junit-platform-launcher")
@@ -18,7 +18,6 @@ dependencies {
 
     implementation(platform("software.amazon.awssdk:bom:$awsJavaSdkVersion"))
     implementation("software.amazon.awssdk:s3")
-    implementation("software.amazon.awssdk:imds")
     
     // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
     implementation("org.slf4j:slf4j-api:1.7.25")
@@ -42,38 +41,6 @@ dependencies {
     implementation("org.immutables:builder:$immutablesVersion")
 }
 
-
-fun isImplemented_ServiceClientConfig(): Boolean {
-    val versionParts = awsJavaSdkVersion.split(".")
-    val majorVersion = versionParts[0].toInt()
-    val minorVersion = versionParts.getOrNull(1)?.toInt() ?: 0
-    val patchVersion = versionParts.getOrNull(2)?.toInt() ?: 0
-    return majorVersion >= 2 && minorVersion >= 20 && patchVersion >= 32
-}
-
-fun excludeConditionally(sourceSet: SourceSet, condition: () -> Boolean, vararg paths: String) {
-    if (condition()) {
-        sourceSet.java.exclude(*paths)
-    }
-}
-
-sourceSets {
-    main {
-        excludeConditionally(
-            sourceSet = this,
-            condition = { !isImplemented_ServiceClientConfig() },
-            paths = arrayOf("**/InterceptorIdempotencyTest.java")
-        )
-    }
-    test {
-        excludeConditionally(
-            sourceSet = this,
-            condition = { !isImplemented_ServiceClientConfig() },
-            paths = arrayOf("**/InterceptorIdempotencyTest.java")
-        )
-    }
-}
-
 java {
     toolchain {
         languageVersion = JavaLanguageVersion.of(21)
diff --git a/app/src/main/java/org/dashdive/internal/InitialSetupWorker.java b/app/src/main/java/org/dashdive/internal/InitialSetupWorker.java
index 291bdf5..44b6b66 100644
--- a/app/src/main/java/org/dashdive/internal/InitialSetupWorker.java
+++ b/app/src/main/java/org/dashdive/internal/InitialSetupWorker.java
@@ -8,7 +8,6 @@ import java.net.HttpURLConnection;
 import java.net.http.HttpClient;
 import java.net.http.HttpRequest;
 import java.net.http.HttpResponse;
-import java.time.Duration;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ConcurrentHashMap;
@@ -28,9 +27,7 @@ import com.dashdive.internal.telemetry.TelemetryPayload;
 import org.immutables.value.Value;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import software.amazon.awssdk.core.retry.backoff.FixedDelayBackoffStrategy;
-import software.amazon.awssdk.imds.Ec2MetadataClient;
-import software.amazon.awssdk.imds.Ec2MetadataResponse;
+import software.amazon.awssdk.regions.internal.util.EC2MetadataUtils;
 
 public class InitialSetupWorker implements Runnable {
   private static final Logger logger = LoggerFactory.getLogger(InitialSetupWorker.class);
@@ -250,20 +247,10 @@ public class InitialSetupWorker implements Runnable {
           IMDSDataField.AMI_ID,
           IMDSDataField.KERNEL_ID,
           IMDSDataField.INSTANCE_TYPE);
+  private static final int QUERY_TRIES = 3;
 
   private static GetAwsImdsDataResult getAwsImdsData() {
     final int maxImdsRequestConcurrency = 8;
-    // We don't use Ec2MetadataAsyncClient because it has noisy error
-    // logging that we don't want to surface to our users
-    final Ec2MetadataClient client =
-        Ec2MetadataClient.builder()
-            // Don't have to worry about retries blocking client
-            //  startup since this is a background thread
-            .retryPolicy(
-                p ->
-                    p.backoffStrategy(FixedDelayBackoffStrategy.create(Duration.ofMillis(200)))
-                        .numRetries(2))
-            .build();
     final ExecutorService executor = Executors.newFixedThreadPool(maxImdsRequestConcurrency);
 
     final ConcurrentMap<String, String> valuesByField = new ConcurrentHashMap<>();
@@ -276,9 +263,10 @@ public class InitialSetupWorker implements Runnable {
                     CompletableFuture.runAsync(
                         () -> {
                           try {
-                            Ec2MetadataResponse response =
-                                client.get(IMDS_BASE_PATH + imdsDataFieldPath);
-                            valuesByField.put(imdsDataFieldPath, response.asString());
+                            final String fieldValue =
+                                EC2MetadataUtils.getData(
+                                    IMDS_BASE_PATH + imdsDataFieldPath, QUERY_TRIES);
+                            valuesByField.put(imdsDataFieldPath, fieldValue);
                           } catch (Exception exception) {
                             exceptionPayloadsByField.put(
                                 imdsDataFieldPath,
@@ -289,7 +277,6 @@ public class InitialSetupWorker implements Runnable {
             .collect(ImmutableList.toImmutableList());
 
     CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
-    client.close();
     executor.shutdown();
 
     return ImmutableGetAwsImdsDataResult.builder()
diff --git a/app/src/test/java/org/dashdive/InterceptorIdempotencyTest.java b/app/src/test/java/org/dashdive/InterceptorIdempotencyTest.java
deleted file mode 100644
index bc2cac4..0000000
--- a/app/src/test/java/org/dashdive/InterceptorIdempotencyTest.java
+++ /dev/null
@@ -1,116 +0,0 @@
-package com.dashdive;
-
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import com.dashdive.internal.ImmutableDashdiveInstanceInfo;
-import com.dashdive.internal.ImmutableSetupDefaults;
-import com.dashdive.internal.SetupDefaults;
-import com.dashdive.internal.extraction.S3RoundTripInterceptor;
-import com.dashdive.internal.telemetry.TelemetryPayload;
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration;
-import software.amazon.awssdk.core.interceptor.ExecutionInterceptor;
-import software.amazon.awssdk.regions.Region;
-import software.amazon.awssdk.services.s3.S3Client;
-import software.amazon.awssdk.services.s3.S3ClientBuilder;
-
-public class InterceptorIdempotencyTest {
-  private static List<ExecutionInterceptor> withoutAwsInternalInterceptors(
-      List<ExecutionInterceptor> interceptors) {
-    final String awsInterceptorPrefix = "software.amazon.awssdk.";
-    return interceptors.stream()
-        .filter(interceptor -> !interceptor.getClass().getName().startsWith(awsInterceptorPrefix))
-        .toList();
-  }
-
-  @Test
-  void constructorsWorkIdempotently() {
-    MockHttpClient sharedMockedClient = new MockHttpClient();
-
-    SetupDefaults setupDefaults =
-        ImmutableSetupDefaults.builder()
-            .dashdiveInstanceInfo(
-                ImmutableDashdiveInstanceInfo.builder()
-                    .classInstanceId("constructors-work-idempotently")
-                    .build())
-            .targetEventBatchSize(100)
-            .startupTelemetryWarnings(TelemetryPayload.of())
-            .build();
-    Dashdive dashdive =
-        new Dashdive(
-            TestUtils.API_KEY_DUMMY,
-            Optional.of(TestUtils.FACTORY_EMPTY),
-            Optional.empty(),
-            sharedMockedClient.getDelegate(),
-            sharedMockedClient.getDelegate(),
-            sharedMockedClient.getDelegate(),
-            sharedMockedClient.getDelegate(),
-            Optional.of(setupDefaults));
-
-    ClientOverrideConfiguration.Builder combinedOverrideConfigurationBuilder =
-        ClientOverrideConfiguration.builder().headers(Map.of("dummy-key", List.of("dummy-value")));
-    combinedOverrideConfigurationBuilder =
-        dashdive.withInterceptor(combinedOverrideConfigurationBuilder);
-    combinedOverrideConfigurationBuilder =
-        dashdive.withInterceptor(combinedOverrideConfigurationBuilder);
-    S3ClientBuilder combinedS3ClientBuilder =
-        S3Client.builder()
-            .region(Region.US_WEST_1)
-            .overrideConfiguration(combinedOverrideConfigurationBuilder.build());
-    combinedS3ClientBuilder = dashdive.withInstrumentation(combinedS3ClientBuilder);
-    combinedS3ClientBuilder = dashdive.withInstrumentation(combinedS3ClientBuilder);
-    final S3Client combinedS3Client = combinedS3ClientBuilder.build();
-
-    ClientOverrideConfiguration.Builder interceptorOverrideConfigurationBuilder =
-        ClientOverrideConfiguration.builder();
-    interceptorOverrideConfigurationBuilder =
-        dashdive.withInterceptor(interceptorOverrideConfigurationBuilder);
-    interceptorOverrideConfigurationBuilder =
-        dashdive.withInterceptor(interceptorOverrideConfigurationBuilder);
-    final S3Client interceptorS3Client =
-        S3Client.builder()
-            .region(Region.US_EAST_1)
-            .overrideConfiguration(interceptorOverrideConfigurationBuilder.build())
-            .build();
-
-    S3ClientBuilder instrumentationS3ClientBuilder = S3Client.builder().region(Region.EU_CENTRAL_1);
-    instrumentationS3ClientBuilder = dashdive.withInstrumentation(instrumentationS3ClientBuilder);
-    instrumentationS3ClientBuilder = dashdive.withInstrumentation(instrumentationS3ClientBuilder);
-    final S3Client instrumentationS3Client = instrumentationS3ClientBuilder.build();
-
-    final List<ExecutionInterceptor> combinedList =
-        withoutAwsInternalInterceptors(
-            combinedS3Client
-                .serviceClientConfiguration()
-                .overrideConfiguration()
-                .executionInterceptors());
-    final List<ExecutionInterceptor> interceptorList =
-        withoutAwsInternalInterceptors(
-            interceptorS3Client
-                .serviceClientConfiguration()
-                .overrideConfiguration()
-                .executionInterceptors());
-    final List<ExecutionInterceptor> instrumentationList =
-        withoutAwsInternalInterceptors(
-            instrumentationS3Client
-                .serviceClientConfiguration()
-                .overrideConfiguration()
-                .executionInterceptors());
-
-    Assertions.assertEquals(1, combinedList.size());
-    Assertions.assertInstanceOf(S3RoundTripInterceptor.class, combinedList.getFirst());
-
-    Assertions.assertEquals(1, interceptorList.size());
-    Assertions.assertInstanceOf(S3RoundTripInterceptor.class, interceptorList.getFirst());
-
-    Assertions.assertEquals(1, instrumentationList.size());
-    Assertions.assertInstanceOf(S3RoundTripInterceptor.class, instrumentationList.getFirst());
-
-    combinedS3Client.close();
-    interceptorS3Client.close();
-    instrumentationS3Client.close();
-    dashdive.close();
-  }
-}
